generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id            String    @id @default(cuid())
   name          String?
   username      String? @unique
   bio           String?
   email         String?   @unique
   emailVerified DateTime? @map("email_verified")
   image         String?
   password      String?

   accounts      Account[]
   sessions      Session[]

   @@map("users")
}

model Post {
   id            String    @id @default(cuid())
   media String?
   text String?
   

   @@map("posts")
}

model Comement {
   id            String    @id @default(cuid())

   @@map("comments")
}

model Save {
   id            String    @id @default(cuid())
   userId      String

   @@map("saves")
}

model InsideGroups { // The groups that the user is present
id            String    @id @default(cuid())

   @@map("in_groups")
}

// Bullshit

model Account {
   id                String  @id @default(cuid())
   userId            String  @map("user_id")
   type              String
   provider          String
   providerAccountId String  @map("provider_account_id")
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("accounts")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique @map("session_token")
   userId       String   @map("user_id")
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("sessions")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
   @@map("verificationtokens")
}
