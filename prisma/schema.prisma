generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String?
  username     String?   @unique
  bio          String?
  email        String?   @unique
  emailVerified DateTime? @map("email_verified")
  image        String?
  banner String?
  password     String?
  posts        Post[]
  comments     Comment[]
  bookmarks    Bookmark[]
  groups       InGroups[]
  accounts     Account[]
  sessions     Session[]
  ownedGroups  Group[]    @relation("GroupOwner")
  userProfilePictures UserProfilePictures?
  viewed GroupView[]

  @@map("users")
}

model UserProfilePictures {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  avatar    String?
  banner    String?

  @@map("user_profile_pics")
}

model Post {
  id        String    @id @default(cuid())
  media     String?
  text      String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  bookmarks Bookmark[]
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String

  @@map("posts")
}

model Comment {
  id        String @id @default(cuid())
  text      String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post   @relation(fields: [postId], references: [id])
  postId    String

  @@map("comments")
}

model Bookmark {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String

  @@map("bookmarks")
}

model InGroups {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@map("in_groups")
}

model Group {
  id          String    @id @default(cuid())
  name        String @unique
  groupName String?
  description String?
  members     InGroups[]
  posts       Post[]
  owner       User      @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId     String
  categories  String[]     @default([])
  banner String?
  logo String?
  groupProfilePics GroupProfilePics?
  groupViews        GroupView[]

  @@map("groups")
}

model GroupView {
  id                String    @id @default(cuid())
  viewedAt          DateTime  @default(now())

  // Define relation to Group model
  group             Group     @relation(fields: [groupId], references: [id])
  groupId           String

  // Define relation to User model (optional, if you want to track which user viewed the group)
  viewer            User?     @relation(fields: [viewerId], references: [id])
  viewerId          String?
}

model GroupProfilePics {
  id        String  @id @default(cuid())
  groupId    String  @unique
  group      Group    @relation(fields: [groupId], references: [id])
  logo    String?
  banner    String?

  @@map("group_profile_pics")
}


// Bullshit

model Account {
   id                String  @id @default(cuid())
   userId            String  @map("user_id")
   type              String
   provider          String
   providerAccountId String  @map("provider_account_id")
   refresh_token     String? @db.Text
   access_token      String? @db.Text
   expires_at        Int?
   token_type        String?
   scope             String?
   id_token          String? @db.Text
   session_state     String?

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("accounts")
}

model Session {
   id           String   @id @default(cuid())
   sessionToken String   @unique @map("session_token")
   userId       String   @map("user_id")
   expires      DateTime
   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("sessions")
}

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
   @@map("verification_tokens")
}
